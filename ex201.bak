;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname ex201) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/batch-io)
(require 2htdp/itunes)

; the 2htdp/itunes library documentation, part 1: 
 
; An LTracks is one of:
; – '()
; – (cons Track LTracks)
 
;(define-struct track
;  [name artist album time track# added play# played])
; A Track is a structure:
;   (make-track String String String N N Date N Date)
; interpretation An instance records in order: the track's 
; title, its producing artist, to which album it belongs, 
; its playing time in milliseconds, its position within the 
; album, the date it was added, how often it has been 
; played, and the date when it was last played
 
;(define-struct date [year month day hour minute second])
; A Date is a structure:
;   (make-date N N N N N N)
; interpretation An instance records six pieces of information:
; the date's year, month (between 1 and 12 inclusive), 
; day (between 1 and 31), hour (between 0 
; and 23), minute (between 0 and 59), and 
; second (also between 0 and 59).

; Any Any Any Any Any Any Any Any -> Track or #false
; creates an instance of Track for legitimate inputs
; otherwise it produces #false
;(define (create-track name artist album time
;                      track# added play# played)
;  ...)
 
; Any Any Any Any Any Any -> Date or #false
; creates an instance of Date for legitimate inputs 
; otherwise it produces #false
;(define (create-date y mo day h m s)
;  ...)
 
; String -> LTracks
; creates a list-of-tracks representation from the
; text in file-name (an XML export from iTunes)
;(define (read-itunes-as-tracks file-name)
;  ...)

; modify the following to use your chosen name
; (define ITUNES-LOCATION "itunes.xml")
 
; LTracks
;(define itunes-tracks
;  (read-itunes-as-tracks ITUNES-LOCATION))

(define DATE1 (create-date 2018 04 21 5 56 34))
(define DATE2 (create-date 1983 02 22 14 43 35))
(define DATE3 (create-date 2011 09 28 12 23 45))
(define DATE4 (create-date 2004 04 11 22 08 44))
;(create-track name artist album time
;                      track# added play# played)
(define TRACK1 (create-track "tr01" "ar01" "al01" 22344 1 DATE4 12 DATE1))
(define TRACK2 (create-track "tr02" "ar01" "al01" 32344 2 DATE4 1 DATE2))
(define TRACK3 (create-track "tr03" "ar01" "al01" 27644 3 DATE4 2 DATE3))
(define TRACK4 (create-track "tr01" "ar02" "al02" 81233 1 DATE4 32 DATE4))
(define TRACK5 (create-track "tr02" "ar02" "al02" 22323 2 DATE3 22 DATE1))
(define TRACK6 (create-track "tr03" "ar02" "al02" 46765 3 DATE2 19 DATE2))
(define TRACK7 (create-track "tr01" "ar03" "al03" 11145 1 DATE1 33 DATE3))
(define TRACK8 (create-track "tr02" "ar03" "al03" 24684 2 DATE3 44 DATE4))
(define TRACK9 (create-track "tr01" "ar01" "al04" 22345 1 DATE2 15 DATE1))
(define TRACK0 (create-track "tr02" "ar01" "al04" 73532 2 DATE2 73 DATE1))

(define LTRACK1 (list TRACK1 TRACK2 TRACK3 TRACK4 TRACK5 TRACK6 TRACK7 TRACK8
                      TRACK9 TRACK0))
(define LTRACK2 (list TRACK1 TRACK2 TRACK3))
(define LTRACK3 (list TRACK4 TRACK5 TRACK6))
(define LTRACK4 (list TRACK4 TRACK1 TRACK3 TRACK0 TRACK5 TRACK7))

; LTracks -> Number
; returns the total play time for a given LTracks
(check-expect (total-time LTRACK2) 82332) 
(define (total-time l)
  (cond
    [(empty? l) 0]
    [else (+ (track-time (first l)) (total-time (rest l)))]))

; LTracks -> List-of-Strings
; returns all album titles from a given LTracks
(define (select-all-album-title l)
  